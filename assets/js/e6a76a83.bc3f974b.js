"use strict";(self.webpackChunklangflow_docs=self.webpackChunklangflow_docs||[]).push([[3558],{7533:(e,t,n)=>{n.d(t,{A:()=>c});var a=n(6540),s=n(1122),o=n(6025),r=n(4848);const c=e=>{let{alt:t,sources:n,style:c}=e;const[i,l]=(0,a.useState)(!1),d=e=>{"Escape"===e.key&&l(!1)};(0,a.useEffect)((()=>(i?document.addEventListener("keydown",d):document.removeEventListener("keydown",d),()=>{document.removeEventListener("keydown",d)})),[i]);return(0,r.jsx)("div",{className:"zoomable-image "+(i?"fullscreen":""),onClick:()=>{l(!i)},style:{width:"50%",margin:"0 auto",display:"flex",justifyContent:"center",...c},children:(0,r.jsx)(s.A,{className:"zoomable-image-inner",alt:t,sources:{light:(0,o.Ay)(n.light),dark:(0,o.Ay)(n.dark)}})})}},5593:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>p});n(6540);var a=n(4848),s=n(8453),o=(n(1122),n(6025),n(7533),n(3554)),r=n.n(o),c=n(7293);const i={},l="Create Data",d={id:"examples/create-record",title:"Create Data",description:"This page may contain outdated information. It will be updated as soon as possible.",source:"@site/docs/examples/create-record.mdx",sourceDirName:"examples",slug:"/examples/create-record",permalink:"/examples/create-record",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{}},u={},p=[];function m(e){const t=Object.assign({h1:"h1",p:"p",code:"code",strong:"strong"},(0,s.RP)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"create-data",children:"Create Data"}),"\n",(0,a.jsx)(c.A,{type:"warning",title:"warning",children:(0,a.jsx)(t.p,{children:"This page may contain outdated information. It will be updated as soon as possible."})}),"\n",(0,a.jsxs)(t.p,{children:["In Langflow, a ",(0,a.jsx)(t.code,{children:"Data"})," has a structure very similar to a Python dictionary. It is a key-value pair data structure."]}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.strong,{children:"Create Data"})," component allows you to dynamically create a ",(0,a.jsx)(t.code,{children:"Data"})," from a specified number of inputs. You can add as many key-value pairs as you want (as long as it is less than 15 \ud83d\ude05). Once you've chosen the number of ",(0,a.jsx)(t.code,{children:"Data"}),", add keys and fill up values, or pass on values from other components to the component using the input handles."]}),"\n",(0,a.jsx)("div",{style:{marginBottom:"20px",display:"flex",justifyContent:"center"},children:(0,a.jsx)(r(),{playing:!0,controls:!0,url:"/videos/create_record.mp4"})})]})}const h=function(e={}){const{wrapper:t}=Object.assign({},(0,s.RP)(),e.components);return t?(0,a.jsx)(t,Object.assign({},e,{children:(0,a.jsx)(m,e)})):m(e)}},8453:(e,t,n)=>{n.d(t,{RP:()=>o,xA:()=>c});var a=n(6540);const s=a.createContext({});function o(e){const t=a.useContext(s);return a.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const r={};function c({components:e,children:t,disableParentContext:n}){let c;return c=n?"function"==typeof e?e({}):e||r:o(e),a.createElement(s.Provider,{value:c},t)}}}]);